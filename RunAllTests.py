import Interpres_Globals
import unittest
import os
import sys
import shutil

# onerror function for rmtree.
def take_ownership(function, path, excinfo):
    # verify the error is an OSError
    if excinfo == OSError:
    # change permisions of directory
        print("Modifying permisions for file %s", entry)
        for root, dirs, files in os.walk(path):
            print(root, dirs, files)
            for d in dirs:
                os.chmod(os.path.join(root, d), 0o777)
            for f in files:
                os.chmod(os.path.join(root, f), 0o777)
        function(path)

test_directory = Interpres_Globals.TEST_OUT_DIR
# check if directory exists
if os.path.isdir(test_directory):
    # if exists: delete contents tree
    with os.scandir(test_directory) as entries:
        for entry in entries:
            if os.path.isdir(entry):
                shutil.rmtree(entry, onerror=take_ownership)
            else:
                try:
                    os.remove(entry)
                except PermissionError:
                    # handle exception regarding a file being used.
                    print('PermissionError: Close any instances of the files generated by this test unit and load'
                          ' the unit again.')

else:
    # Doesnt exists: create contents
    os.makedirs(test_directory, 0o777)
    print("A test output directory has been created at: %s", Interpres_Globals.TEST_OUT_DIR)



loader = unittest.defaultTestLoader
suite = loader.discover(Interpres_Globals.ROOT_DIR)
print(suite.__dict__)
runner = unittest.TextTestRunner(failfast=True)
runner.run(suite)
